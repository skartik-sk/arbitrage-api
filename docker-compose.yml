version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: arbitrage-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: arbitrage
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - arbitrage-network

  # Redis (optional, for caching)
  redis:
    image: redis:7-alpine
    container_name: arbitrage-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - arbitrage-network

  # Arbitrage Bot
  arbitrage-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: arbitrage-bot
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: mongodb://arbitrageuser:arbitragepass@mongodb:27017/arbitrage
      REDIS_URL: redis://redis:6379
      API_PORT: 3000
      LOG_LEVEL: info
      ENABLE_API: "true"
      ENABLE_RATE_LIMITING: "true"
      ENABLE_CORS: "true"
      ENABLE_TRADE_EXECUTION: "false" # Keep simulation mode for safety
      SIMULATION_ONLY: "true"
      MIN_PROFIT_USD: 50
      GAS_BUFFER_PERCENTAGE: 20
      PRICE_UPDATE_INTERVAL_MS: 5000
      SCAN_INTERVAL_MS: 10000
      MAX_TRADE_SIZE_USD: 10000
      MIN_TRADE_SIZE_USD: 100
      # RPC Endpoints (replace with your actual endpoints)
      ETHEREUM_RPC: https://eth-mainnet.alchemyapi.io/v2/YOUR_API_KEY
      FALLBACK_RPC: https://cloudflare-eth.com
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - arbitrage-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: arbitrage-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - arbitrage-bot
    networks:
      - arbitrage-network

  # Grafana for monitoring (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: arbitrage-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - arbitrage-bot
    networks:
      - arbitrage-network

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: arbitrage-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - arbitrage-network

volumes:
  mongodb_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  arbitrage-network:
    driver: bridge